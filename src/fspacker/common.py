import dataclasses
import pathlib
import typing

__all__ = [
    "BuildTarget",
    "BuildConfig",
    "LibraryInfo",
]

from functools import cached_property

from fspacker.config import MAX_SHOWN_FILES


@dataclasses.dataclass
class BuildTarget:
    src: pathlib.Path
    deps: typing.List[pathlib.Path]
    ast: typing.Set[str]

    def __repr__(self):
        return f"[src={self.src.name}, ast={self.ast}, deps={self.deps}]"

    @cached_property
    def dist_dir(self) -> pathlib.Path:
        return self.src.parent / "dist"

    @cached_property
    def runtime_dir(self) -> pathlib.Path:
        return self.dist_dir / "runtime"

    @cached_property
    def packages_dir(self) -> pathlib.Path:
        return self.dist_dir / "site-packages"


@dataclasses.dataclass
class BuildConfig:
    """Build config generated by parser"""

    targets: typing.Dict[str, BuildTarget]


@dataclasses.dataclass
class LibraryInfo:
    package_name: str
    version: str
    build_tag: str
    abi_tag: str
    platform_tag: str
    filepath: pathlib.Path

    def __repr__(self):
        return self.package_name


@dataclasses.dataclass
class DependsInfo:
    name: str
    files: typing.List[str]
    folders: typing.List[str]
    depends: typing.List[str]

    def __repr__(self):
        if len(self.files) >= MAX_SHOWN_FILES:
            files = [*self.files[:MAX_SHOWN_FILES], "..."]
        else:
            files = self.files
        return f"[name={self.name}, files={files}, \
            folders={self.folders}], depends={self.depends}"
